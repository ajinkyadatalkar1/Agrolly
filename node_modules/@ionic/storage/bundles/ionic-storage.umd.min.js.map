{"version":3,"sources":["ng://@ionic/storage/storage.ts","ng://@ionic/storage/index.ts"],"names":["Storage","config","_this","this","_dbPromise","Promise","resolve","reject","db","defaultConfig","name","storeName","dbKey","driverOrder","actualConfig","Object","assign","LocalForage.defineDriver","CordovaSQLiteDriver","then","LocalForage.createInstance","setDriver","_getDriverOrder","_driver","driver","catch","reason","defineProperty","prototype","ready","map","CordovaSQLiteDriver._driver","LocalForage.INDEXEDDB","LocalForage.WEBSQL","LocalForage.LOCALSTORAGE","get","key","getItem","set","value","setItem","remove","removeItem","clear","length","keys","forEach","iteratorCallback","iterate","StorageConfigToken","InjectionToken","provideStorage","storageConfig","IonicStorageModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule"],"mappings":"4ZAoGA,IAAAA,EAAA,WAWE,SAAAA,EAAYC,GAAZ,IAAAC,EAAAC,kBAT0B,KAUxBA,KAAKC,WAAa,IAAIC,QAAQ,SAACC,EAASC,GACtC,IAAIC,EAEEC,EAkHH,CACLC,KAAM,gBACNC,UAAW,WACXC,MAAO,YACPC,YAAa,CAAC,SAAU,YAAa,SAAU,iBArHvCC,EAAeC,OAAOC,OAAOP,EAAeR,GAAU,IAE5DgB,EAAAA,aAAyBC,GACtBC,KAAK,WACJX,EAAKY,EAAAA,eAA2BN,KAEjCK,KAAK,WACJ,OAAAX,EAAGa,UAAUnB,EAAKoB,gBAAgBR,EAAaD,gBAEhDM,KAAK,WACJjB,EAAKqB,QAAUf,EAAGgB,SAClBlB,EAAQE,KAETiB,SAAM,SAAAC,GAAU,OAAAnB,EAAOmB,cAQ9BX,OAAAY,eAAI3B,EAAA4B,UAAA,SAAM,KAAV,WACE,OAAOzB,KAAKoB,yCAOdvB,EAAA4B,UAAAC,MAAA,WACE,OAAO1B,KAAKC,YAINJ,EAAA4B,UAAAN,yBAAgBT,GACtB,OAAOA,EAAYiB,IAAI,SAAAN,GACrB,OAAQA,GACN,IAAK,SACH,OAAOO,EAAAA,QACT,IAAK,YACH,OAAOC,EAAAA,UACT,IAAK,SACH,OAAOC,EAAAA,OACT,IAAK,eACH,OAAOC,EAAAA,iBAUflC,EAAA4B,UAAAO,IAAA,SAAIC,GACF,OAAOjC,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAG6B,QAAQD,MAS/CpC,EAAA4B,UAAAU,IAAA,SAAIF,EAAaG,GACf,OAAOpC,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAGgC,QAAQJ,EAAKG,MAQpDvC,EAAA4B,UAAAa,OAAA,SAAOL,GACL,OAAOjC,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAGkC,WAAWN,MAOlDpC,EAAA4B,UAAAe,MAAA,WACE,OAAOxC,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAGmC,WAMvC3C,EAAA4B,UAAAgB,OAAA,WACE,OAAOzC,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAGoC,YAMvC5C,EAAA4B,UAAAiB,KAAA,WACE,OAAO1C,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAGqC,UAQvC7C,EAAA4B,UAAAkB,QAAA,SACEC,GAEA,OAAO5C,KAAKC,WAAWe,KAAK,SAAAX,GAAM,OAAAA,EAAGwC,QAAQD,QA3HjD,GAqJA,IAAaE,EAAqB,IAAIC,EAAAA,eACpC,wBAIF,SAAAC,EAA+BC,GAE7B,OAAO,IAAIpD,EADMoD,GA1BV,CACL1C,KAAM,gBACNC,UAAW,WACXC,MAAO,YACPC,YAAa,CAAC,SAAU,YAAa,SAAU,kBCzOnD,IAAAwC,EAAA,gCAaSA,EAAAC,QAAP,SAAeF,GACb,YADa,IAAAA,IAAAA,EAAA,MACN,CACLG,SAAUF,EACVG,UAAW,CACT,CAAEC,QAASR,EAAoBS,SAAUN,GACzC,CACEK,QAASzD,EACT2D,WAAYR,EACZS,KAAM,CAACX,2BAVhBY,EAAAA,aAXD","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport * as LocalForage from 'localforage';\n\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\n\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\nexport class Storage {\n  private _dbPromise: Promise<LocalForage>;\n  private _driver: string = null;\n\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n   * default is that exact ordering.\n   */\n  constructor(config: StorageConfig) {\n    this._dbPromise = new Promise((resolve, reject) => {\n      let db: LocalForage;\n\n      const defaultConfig = getDefaultConfig();\n      const actualConfig = Object.assign(defaultConfig, config || {});\n\n      LocalForage.defineDriver(CordovaSQLiteDriver)\n        .then(() => {\n          db = LocalForage.createInstance(actualConfig);\n        })\n        .then(() =>\n          db.setDriver(this._getDriverOrder(actualConfig.driverOrder))\n        )\n        .then(() => {\n          this._driver = db.driver();\n          resolve(db);\n        })\n        .catch(reason => reject(reason));\n    });\n  }\n\n  /**\n   * Get the name of the driver being used.\n   * @returns Name of the driver\n   */\n  get driver(): string | null {\n    return this._driver;\n  }\n\n  /**\n   * Reflect the readiness of the store.\n   * @returns Returns a promise that resolves when the store is ready\n   */\n  ready(): Promise<LocalForage> {\n    return this._dbPromise;\n  }\n\n  /** @hidden */\n  private _getDriverOrder(driverOrder) {\n    return driverOrder.map(driver => {\n      switch (driver) {\n        case 'sqlite':\n          return CordovaSQLiteDriver._driver;\n        case 'indexeddb':\n          return LocalForage.INDEXEDDB;\n        case 'websql':\n          return LocalForage.WEBSQL;\n        case 'localstorage':\n          return LocalForage.LOCALSTORAGE;\n      }\n    });\n  }\n\n  /**\n   * Get the value associated with the given key.\n   * @param key the key to identify this value\n   * @returns Returns a promise with the value of the given key\n   */\n  get(key: string): Promise<any> {\n    return this._dbPromise.then(db => db.getItem(key));\n  }\n\n  /**\n   * Set the value for the given key.\n   * @param key the key to identify this value\n   * @param value the value for this key\n   * @returns Returns a promise that resolves when the key and value are set\n   */\n  set(key: string, value: any): Promise<any> {\n    return this._dbPromise.then(db => db.setItem(key, value));\n  }\n\n  /**\n   * Remove any value associated with this key.\n   * @param key the key to identify this value\n   * @returns Returns a promise that resolves when the value is removed\n   */\n  remove(key: string): Promise<any> {\n    return this._dbPromise.then(db => db.removeItem(key));\n  }\n\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @returns Returns a promise that resolves when the store is cleared\n   */\n  clear(): Promise<void> {\n    return this._dbPromise.then(db => db.clear());\n  }\n\n  /**\n   * @returns Returns a promise that resolves with the number of keys stored.\n   */\n  length(): Promise<number> {\n    return this._dbPromise.then(db => db.length());\n  }\n\n  /**\n   * @returns Returns a promise that resolves with the keys in the store.\n   */\n  keys(): Promise<string[]> {\n    return this._dbPromise.then(db => db.keys());\n  }\n\n  /**\n   * Iterate through each key,value pair.\n   * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @returns Returns a promise that resolves when the iteration has finished.\n   */\n  forEach(\n    iteratorCallback: (value: any, key: string, iterationNumber: Number) => any\n  ): Promise<void> {\n    return this._dbPromise.then(db => db.iterate(iteratorCallback));\n  }\n}\n\n/** @hidden */\nexport function getDefaultConfig() {\n  return {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n  };\n}\n\n/** @hidden */\nexport interface StorageConfig {\n  name?: string;\n  version?: number;\n  size?: number;\n  storeName?: string;\n  description?: string;\n  driverOrder?: string[];\n  dbKey?: string;\n}\n\n/** @hidden */\nexport const StorageConfigToken = new InjectionToken<any>(\n  'STORAGE_CONFIG_TOKEN'\n);\n\n/** @hidden */\nexport function provideStorage(storageConfig: StorageConfig): Storage {\n  const config = !!storageConfig ? storageConfig : getDefaultConfig();\n  return new Storage(config);\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport {\n  getDefaultConfig,\n  provideStorage,\n  Storage,\n  StorageConfig,\n  StorageConfigToken\n} from './storage';\n\nexport { StorageConfig, StorageConfigToken, Storage };\n\n@NgModule()\nexport class IonicStorageModule {\n  static forRoot(storageConfig: StorageConfig = null): ModuleWithProviders {\n    return {\n      ngModule: IonicStorageModule,\n      providers: [\n        { provide: StorageConfigToken, useValue: storageConfig },\n        {\n          provide: Storage,\n          useFactory: provideStorage,\n          deps: [StorageConfigToken]\n        }\n      ]\n    };\n  }\n}\n"]}